<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:LivetPractice.Views"
        xmlns:c="clr-namespace:LivetPractice.Views.Controls"
        xmlns:vm="clr-namespace:LivetPractice.ViewModels"
        xmlns:b="clr-namespace:LivetPractice.Views.Behaviors"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" x:Class="LivetPractice.Views.MainWindow"
        Title="MainWindow" Height="350" Width="525">
    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>
    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <Grid>
        <c:ExTextBox x:Name="exTextBox"  Text="設定なし" MaxLength="1" HorizontalAlignment="Left" Margin="23,47,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="72" b:TextInputBehavior.InputMode="None">
        </c:ExTextBox>
        <c:ExTextBox x:Name="exTextBox1" Text="On" HorizontalAlignment="Left" Margin="23,65,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="72" b:TextInputBehavior.InputMode="On"/>
        <c:ExTextBox x:Name="exTextBox2" Text="Off" HorizontalAlignment="Left" Margin="23,83,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="72" b:TextInputBehavior.InputMode="Off"/>
        <c:ExTextBox x:Name="txtExIsReadOnly" HorizontalAlignment="Left" Margin="23,127,0,0" TextWrapping="Wrap" Text="ExTextBox" VerticalAlignment="Top" Width="120" Height="23"/>
        <Button x:Name="button" Content="Button" HorizontalAlignment="Left" Margin="163,127,0,0" VerticalAlignment="Top" Width="75" Click="button_Click"/>
        <TextBox x:Name="txtIsReadOnly" HorizontalAlignment="Left" Height="23" Margin="23,165,0,0" TextWrapping="Wrap" Text="TextBox" VerticalAlignment="Top" Width="120"/>
        <Button x:Name="button1" Content="Button" HorizontalAlignment="Left" Margin="163,165,0,0" VerticalAlignment="Top" Width="75" Click="button1_Click"/>
    </Grid>
</Window>
